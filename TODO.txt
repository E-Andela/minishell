
[ ] Make exit code expander function
[ ] un-comment flags in libft makefile and minishell makefile and
[ ] remove unused variables 
	(ft_strlcat.c:20:17: error: variable â€˜resultâ€™ set but not used [-Werror=unused-but-set-variable] 20 | size_t  result;)
	(ft_envp.c:205:25: error: variable â€˜iâ€™ set but not used [-Werror=unused-but-set-variable] 205 | int  i;)
	op mijn laptop runt blijkbaar een andere cc/gcc versie die dit wel opmerkt

[X] when using echo "hallo doei" it returns "hallo doei". we need to trim the quotes


[X] fix this function: now cmd e will return true because it only checks the length of "e" (or cmd)
		to fix: get ft_strlen(cmd + 1) or ft_strlen("echo") 
		int is_builtin(char *cmd)
		{
			if (ft_strncmp(cmd, "echo", ft_strlen(cmd)) == 0)
				return (1);
			if (ft_strncmp(cmd, "pwd", ft_strlen(cmd)) == 0)
				return (1);
			// if (ft_strncmp(cmd, "cd", ft_strlen(cmd)) == 0)
			// 	return (1);
			if (ft_strncmp(cmd, "export", ft_strlen(cmd)) == 0)
				return (1);
			if (ft_strncmp(cmd, "unset", ft_strlen(cmd)) == 0)
				return (1);
			if (ft_strncmp(cmd, "env", ft_strlen(cmd)) == 0)
				return (1);
			// if (ft_strncmp(cmd, "exit", ft_strlen(cmd)) == 0)
			// 	return (1);
			return (0);
		}

[X]	user: echo 'ha'"llo" 	=	ha'"llo
	bash: echo 'ha'"llo" 	->	hallo

[x] check expander to make it so quotes get trimmed after expention

[x] echo "HALLO"'$USER' 	-> HALLO'goliath' (moet zijn: HALLO$USER)
[x] echo "HALLO" '$USER'	-> HALLO" $USER

[ ] fix propper error messages
	[ ]	user: echo 'ha'"llo"'	=
		Missing closing quote.
		: Interrupted system call
		bash: echo 'ha'"llo"'	->
		>
	[ ] fix this:
		WRONG:
			user: "$USER"
			command not found: No such file or directory
		CORRECT:
			user: "$USER"
			goliath: command not found

[ ] check two token nodes next to each other. 
	[ ] echo <<< now gets parsed as a heredock with < as dilimiter. this needs to be a syntax unexpected token error.
	[ ]	user: cat <<EOF | grep "test"  -> needs to give error and exit shell



[X] 	echo "hallo '$USER' hoe gaat het?" -> hallo 'goliath' hoe gaat het?
[]	echo $USER > file1  writes this in file1: 	goliath
												[?2004huser:
	it then getst stuck and after closing out of the program it writes more weird stuff
	echo "HELLO $USER!" > file2 | wc -l > file1 does work!


[] WTF!
./minishell 5 5
Segmentation fault (core dumped)
	- its because ive put (void)argv in the main function.


[] compile with flags and fix errors
[] norminette




Tests

[ ] 	echo bonjour ; |
[ ] 	echo bonjour | |
[ ] 	|
[ ] 	echo bonjour |;
[ ] 	echo bonjour ; ls
[ ] 	echo bonjour > test\ 1
[ ] 	cd $HOME/Documents
[ ] 	echo "\s" & echo "\s"
[ ] 	echo >
[ ] 	echo -n -n -nnnn -nnnnm
[ ] 	cat /dev/random | head -n 1 | cat -e
[ ] 	unset var1 # with undefined var1
[ ] 	export "" et unset ""
[ ] 	echo test > file test1
[ ] 	$
[ ] 	not_cmd bonjour > salut
[ ] 	env puis export puis env # vars aren't sorted
[ ] 	cat Makefile | grep pr | head -n 5 | cd test (mybin) # check status code
[ ] 	cat Makefile | grep pr | head -n 5 | cat test (bin) # check status code
[ ] 	cat Makefile | grep pr | head -n 5 | hello (NA) # check status code
[ ] 	echo bonjour >>> test
[ ] 	echo bonjour > > out
[ ] 	echo 2 >> out1 > out2
[ ] 	echo 2 > out1 >> out2
[ ] 	cat < test # with non-existent test
[ ] 	export var; export var=test
[ ] 	echo bonjour > $test # with test not defined
[ ] 	file_name_in_current_dir
[ ] 	cd ../../../../../.. ; pwd
[ ] 	ctrl-C . 130 sur bin(ex : sleep 10)&line vide
[ ] 	ctrl-\ .131 sur bin
[ ] 	echo "bip | bip ; coyotte > < " "
[ ] 	cat | cat | cat | ls # check outputs order
[ ] 	$bla # with bla not defined
[ ] 	export var ="cat Makefile | grep >"
[ ] 	export "test=ici"=coucou
[ ] 	c$var Makefile # with var=at
[ ] 	$LESS$VAR
[ ] 	/bin/echo bonjour
[ ] 	not_cmd
[ ] 	sleep 5 | exit
[ ] 	echo bonjour > $test w/ t
[ ] 	"exit retour a la ligne"
[ ] 	minishell # binary not in path without "./" before
[ ] 	cat diufosgid # check exit code
[ ] 	exit # should return the last exit code value
[ ] 	exit -10
[ ] 	exit +10
[ ] 	;
[ ] 	echo coucou | ;
[ ] 	echo "$HOME"
[ ] 	echo '$HOME'
[ ] 	export ; env # display is different for both commands
[ ] 	echo $HOME
[ ] 	> log echo coucou
[ ] 	echo hudifg d | | hugdfihd
[ ] 	echo
[ ] 	echo simple
[ ] 	echo -n simple
[ ] 	echo ''
[ ] 	echo ""
[ ] 	echo "\"
[ ] 	echo "\n \n \n"
[ ] 	echo "\n \n \\n"
[ ] 	echo ;;
[ ] 	echo hi";" hihi
[ ] 	echo hi " ; " hihi
[ ] 	cd
[ ] 	cd .
[ ] 	cd ~
[ ] 	cd /
[ ] 	cd no_file
[ ] 	cd a b c d
[ ] 	pwd a
[ ] 	pwd a b c d
[ ] 	export LOL=lala ROR=rara
[ ] 	unset LOL ROR
[ ] 	export "HI= hi"
[ ] 	export "HI =hi"
[ ] 	/bin/ls
[ ] 	# write something the press ctrl+c
[ ] 	# write something then press ctrl+d
[ ] 	# write something then press ctrl+\
[ ] 	echo $?
[ ] 	l^Ds
[ ] 	echo |
[ ] 	| echo
[ ] 	sort | ls # check output order
[ ] 	cat < >
[ ] 	cat < <
[ ] 	cat > >
[ ] 	> a ls > b < Makefile
[ ] 	echo > a Hello World!
[ ] 	> a echo Hello World!
[ ] 	cat < Makefile | grep gcc > output
[ ] 	exit 0 | exit 1
[ ] 	exit 1 | exit 0

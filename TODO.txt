
[x] Make exit code expander function
[ ] un-comment flags in libft makefile and minishell makefile and
[ ] remove unused variables 
		(ft_strlcat.c:20:17: error: variable â€˜resultâ€™ set but not used [-Werror=unused-but-set-variable] 20 | size_t  result;)
		(ft_envp.c:205:25: error: variable â€˜iâ€™ set but not used [-Werror=unused-but-set-variable] 205 | int  i;)
		op mijn laptop runt blijkbaar een andere cc/gcc versie die dit wel opmerkt

[X] when using echo "hallo doei" it returns "hallo doei". we need to trim the quotes


[X] fix this function: now cmd e will return true because it only checks the length of "e" (or cmd)
		to fix: get ft_strlen(cmd + 1) or ft_strlen("echo") 
		int is_builtin(char *cmd)
		{
			if (ft_strncmp(cmd, "echo", ft_strlen(cmd)) == 0)
				return (1);
			if (ft_strncmp(cmd, "pwd", ft_strlen(cmd)) == 0)
				return (1);
			// if (ft_strncmp(cmd, "cd", ft_strlen(cmd)) == 0)
			// 	return (1);
			if (ft_strncmp(cmd, "export", ft_strlen(cmd)) == 0)
				return (1);
			if (ft_strncmp(cmd, "unset", ft_strlen(cmd)) == 0)
				return (1);
			if (ft_strncmp(cmd, "env", ft_strlen(cmd)) == 0)
				return (1);
			// if (ft_strncmp(cmd, "exit", ft_strlen(cmd)) == 0)
			// 	return (1);
			return (0);
		}

[X]	user: echo 'ha'"llo" 	=	ha'"llo
	bash: echo 'ha'"llo" 	->	hallo

[x] check expander to make it so quotes get trimmed after expention

[x] echo "HALLO"'$USER' 	-> HALLO'goliath' (moet zijn: HALLO$USER)
[x] echo "HALLO" '$USER'	-> HALLO" $USER

[ ] fix propper error messages
	[ ]	user: echo 'ha'"llo"'	=
		Missing closing quote.
		: Success
		bash: echo 'ha'"llo"'	->
		>
	[x] fix this:
		WRONG:
			user: "$USER"	
			command not found: No such file or directory
		CORRECT:
			user: "$USER"
			goliath: command not found

[x] check two token nodes next to each other. 
	[x] echo <<< now gets parsed as a heredock with < as dilimiter. this needs to be a syntax unexpected token error.
	[x]	user: cat <<EOF | grep "test"  -> needs to give error and exit shell



[X] 	echo "hallo '$USER' hoe gaat het?" -> hallo 'goliath' hoe gaat het?
[x]	echo $USER > file1  writes this in file1: 	goliath
												[?2004huser:
		-> dub function needs to set STDOUT back to terminal? now STDOUT stayes in file1

	it then getst stuck and after closing out of the program it writes more weird stuff
	echo "HELLO $USER!" > file2 | wc -l > file1 does work!


[x] WTF! (fixed!)
./minishell 5 5
Segmentation fault (core dumped)
	- its because ive put (void)argv in the main function.


weird bug?:
[x]		1. export var ="cat Makefile | grep >"
		2. export 	->		everything looks fine, var is an empty export variable
		3. export var ="cat Makefile | grep >" (again)
		4. export (again) looks like this:
declare -x var="ï¿½ï¿½ï¿½ï¿½!V"
free(): invalid pointer
Aborted (core dumped)


[ ] compile with flags and fix errors
[ ] norminette






TEEEEEEEESSSSTING!!!!!:::::::




legenda:
v = voltooid (lijkt op zo'n vinkje)
x = doet het nog niet
? = even overleggen of dir goed is / of we dit moeten handelen
/ = almost


TODO
unexpected token error when:

[v]		user: |			
[v]		user: >			(we could improve by saying "syntax error near unexpected token `newline' " )
[v]		user: <			(we could improve by saying "syntax error near unexpected token `newline' " )
[v]		user: >>		(we could improve by saying "syntax error near unexpected token `newline' " )
[v]		user: <<		(we could improve by saying "syntax error near unexpected token `newline' " )



----------------------------------------









ERRORS TO FIX!:


NIET HANDELEN?
[/] 	echo bonjour |;													bash= bash: syntax error near unexpected token `;'												minishell= Command not found
[/] 	echo bonjour ; ls												bash= bonjour
																		      file1  file2  inc  libft  Makefile  minishell  obj  output  output1  src  TODO.txt		minishell= bonjour ; ls
[/] 	echo "\s" & echo "\s"											special characers \s and & we dont need to handle
[/] 	echo coucou | ;													i think its good, we don't need to handle the ;. when we replace this in bash it returns command not fount, just like our minihell. just syntax is een beetje anders

DUBBLE CHECK WITH SOMEONE IF ITS GOOD LIKE THIS
[/] 	cat /dev/random | head -n 1 | cat -e							I think its correct, but seeing as they are random values we can not compare
[?] 	unset var1 # with undefined var1								doet niets, is dat correct?
[?] 	env puis export puis env # vars aren't sorted					deze snap ik niet
[?] 	ctrl-C . 130 sur bin(ex : sleep 10)&line vide
[?] 	ctrl-\ .131 sur bin
[?] 	echo "bip | bip ; coyotte > < " "
[?] 	exit # should return the last exit code value
[?] 	exit -10
[?] 	exit +10
[?] 	echo "\"														think its good. bash looks like its in a heredoc, 							minishell prints [\]
[?] 	echo "\\n \\n \\n"												bash= \n \n \n			minishell= \\n \\n \\n  							DONT NEED TO HANDLE THIS
[?] 	echo ;;															bash= bash: syntax error near unexpected token `;;'							minishell= ;;
[/] 	echo |															bash= herdoc behaviour														minishell= minishell: syntax error near unexpected token '|'
[v?/] 	sort | ls # check output order									output is exactly the same as bash, but they both get stuck 

ERROR MESSAGE: export: not a valid identifier:
[v] 	export ""														bash= export: `': not a valid identifier									minishell= export: not a valid identifier (basically perfect, we can check if we want to add the [`':])
[v] 	export var ="cat Makefile | grep >"								bash= bash: export: `=cat Makefile | grep >': not a valid identifier		minishell= export: not a valid identifier
[v] 	export "HI =hi"													bash= bash: export: `HI =hi': not a valid identifier						minishell= export: not a valid identifier


STDIN BUG:
[x] 	echo bonjour > test\ 1											bash= creates file called test 1 with [bonjour] in it.						minishell= creates file called test\ with [bonjour 1] in it. (also the STDOUT dit not swich back because its followed by this): [91mcommands list with redirects has been cleared :) [0m \n	 [91mdata has been RESET :) 	\n 	[0m	\n	[?2004huser: )
[x] 	echo bonjour > test1											bash= creates file called test 1 with [bonjour] in it.						minishell= creates file called test\ with [bonjour 1] in it. (also the STDOUT dit not swich back because its followed by this): [91mcommands list with redirects has been cleared :) [0m \n	 [91mdata has been RESET :) 	\n 	[0m	\n	[?2004huser: )
[x] 	echo test > file test1											bash= creates file called file with [test test1] in it.						minishell= does the same but does not give STDOUT back to terminal
[x] 	echo 2 >> out1 > out2											bijna goed, alleen STDOUT terug geven															
[x] 	echo 2 > out1 >> out2											same als hierboven
[/] 	> log echo coucou												the SDOUT thingy
[x] 	echo > a Hello World!											the SDOUT thingy
[x] 	> a echo Hello World!											the SDOUT thingy


FIX: MAKE FUNCTION IN PARSER:
	FILE AND DIRECTORY ERRORS:
	[x] 	cat Makefile | grep pr | head -n 5 | cd test (mybin) 			bash= bash: cd: test: No such file or directory								minishell= test: No such file or directory  			(exitcode = 1 = correct (command not found))
	# check status code		
	[x] 	cd ~															bash= goes to /home/livliege												minishell= ~: No such file or directory
	[/] 	cd no_file														bash= bash: cd: no_file: No such file or directory							minishell= no_file: No such file or directory
	[x] 	cd a b c d														bash= bash: cd: too many arguments											minishell= a: No such file or directory
	[x]		Documents/github/minishell_2									bash= bash: Documents/github/minishell_2: Is a directory					minishell= Command not found

	SYNTAX ERRORS:	syntax error near unexpected token
	[v] 	echo bonjour >>> test											bash= bash: syntax error near unexpected token `>'							minishell= creates file called [>] with [bonjour out] in it. also STDOUT problem again.
	[v] 	echo bonjour > > out											bash= bash: syntax error near unexpected token `>'							minishell= creates file called [>] with [bonjour out] in it. also STDOUT problem again.								
	[v] 	cat < >															bash= bash: syntax error near unexpected token `>'							minishell= >: No such file or directory
	[v] 	cat < <															bash= bash: syntax error near unexpected token `<'							minishell= <: No such file or directory
	[v] 	cat > >															bash= bash: syntax error near unexpected token `>'							minishell= maakt file aan met naam [>] waar ik vervolgens in kan schrijven
	[v] 	echo hudifg d | | hugdfihd										bash= bash: syntax error near unexpected token `|'							minishell= Command not found

	AMBIGUOUS REDIRECT
	[v] 	echo bonjour > $test 	# with test not defined					bash= bash: $test: ambiguous redirect										minishell= No such file or directory [\n] bonjour
	[v] 	echo bonjour > $test w/ t										bash= bash: $test: ambiguous redirect										(also we dont need to handle \w)

[v] edge case
bash:
	$JFKDSJFDSKFJDSFDSKF		gives promt back
	"$JFKDSJFDSKFJDSFDSKF"		Command '' not found
minishell:
	$JFKDSJFDSKFJDSFDSKF		gives promt back
	"$JFKDSJFDSKFJDSFDSKF"		gives promt back



	WRONG ERROR (Execve failed: Permission denied)
	[x] 	file_name_in_current_dir										bash= Makefile: command not found											minishell= Execve failed: Permission denied		-> 	SAGFAULT!
	[v] 	$bla # with bla not defined										bash= returns prompt to user. 												minishell= Execve failed: Permission denied		-> 	SAGFAULT!
	[v] 	$LESS$VAR														bash= returns prompt to user. 												minishell= Execve failed: Permission denied		-> 	SAGFAULT!
SAGFAULT!

WRONG ERROR (command not found)
[?] 	exit 0 | exit 1													bash lijkt niets te doen? 													minishell= command not found
[?] 	exit 1 | exit 0													bash lijkt niets te doen? 													minishell= command not found
[/] 	sleep 5 | exit													bash= sleeps 5 sec, then gives promt back.									minishell= Command not found
[x] 	minishell # binary not in path without "./" before				bash= minishell: command not found											minishell= executes minishell again



FOUND SEGFAULTS:
[x]	user: >>>		found in: in execute_commands		we just need to catch that in syntax error function
[x]	user: <<<		fount in: in execute_commands		we just need to catch that in syntax error function







TESTED AGAIN ON 03-01-2025


	PASSED:
echo bonjour | |
|


	FAILED:
cd $HOME/Documents


	FAILED, BUT DO WE NEED TO HANDLE THIS?
echo bonjour > test\ 1
echo "\s" & echo "\s"
	
	TESTS!	
echo >
echo -n -n -nnnn -nnnnm
cat /dev/random | head -n 1 | cat -e
unset var1 # with undefined var1
export ""
unset ""
echo test > file test1
$
not_cmd bonjour > salut
env puis export puis env # vars aren't sorted
cat Makefile | grep pr | head -n 5 | cd test (mybin) # check status code
cat Makefile | grep pr | head -n 5 | cat test (bin) # check status code
cat Makefile | grep pr | head -n 5 | hello (NA) # check status code
echo bonjour >>> test
echo bonjour > > out
echo 2 >> out1 > out2
echo 2 > out1 >> out2
cat < test # with non-existent test
export var; export var=test
echo bonjour > $test # with test not defined
file_name_in_current_dir
cd ../../../../../.. ; pwd
ctrl-C . 130 sur bin(ex : sleep 10)&line vide
ctrl-\ .131 sur bin
echo "bip | bip ; coyotte > < " "
cat | cat | cat | ls # check outputs order
$bla # with bla not defined
export var ="cat Makefile | grep >"
export "test=ici"=coucou
c$var Makefile # with var=at
$LESS$VAR
/bin/echo bonjour
not_cmd
sleep 5 | exit
echo bonjour > $test w/ t
"exit retour a la ligne"
minishell # binary not in path without "./" before
cat diufosgid # check exit code
exit # should return the last exit code value
exit -10
exit +10
echo coucou | ;
echo "$HOME"
echo '$HOME'
export ; env # display is different for both commands
echo $HOME
> log echo coucou
echo hudifg d | | hugdfihd
echo
echo simple
echo -n simple
echo ''
echo ""
echo "\"
echo "\n \n \n"
echo "\\n \\n \\n"
echo ;;
echo hi";" hihi
echo hi " ; " hihi
cd
cd .
cd ~
cd /
cd no_file
cd a b c d
pwd a
pwd a b c d
export LOL=lala ROR=rara
unset LOL ROR
export "HI= hi"
export "HI =hi"
/bin/ls
# write something the press ctrl+c
# write something then press ctrl+d
# write something then press ctrl+\
echo $?
l^Ds
echo |
| echo
sort | ls # check output order
cat < >
cat < <
cat > >
> a ls > b < Makefile
echo > a Hello World!
> a echo Hello World!
cat < Makefile | grep gcc > output
exit 0 | exit 1
exit 1 | exit 0
Documents/github/minishell_2
echo sr*
echo "sr*"
echo abc
echo "xyz"
echo "xyz"'123'
echo a"x"y"z"a        ijk
echo ~
echo '123'
echo xyz'123'xyz
echo 'x'$HOME'x'
echo 'x'~'x'
echo
echo '"/home/araiva"'
echo "'/home/araiva'"
echo 0
echo abc$HOME
echo abc$HOMEde
echo "abc$HOMEde"
echo 'abc$HOMEde'
echo abc0de
echo "abc0de"
echo 'abc0de'
echo "10""20""30"
echo "10"20"30"
echo '10''20''30'
echo '10'20'30'
echo 10"20"'30'
echo 10"20     "'30     '
echo 10 "20     "'30     '
echo 10    "20     "'30     '
echo 10    "20     " '30     '
echo 10    "20     "     '30     '
echo "$HOME" '$HOME'
echo x > redirect1 | echo
cat redirect1
rm redirect1 | echo
echo fin
user: >>>
user: <<<
$JFKDSJFDSKFJDSFDSKF
"$JFKDSJFDSKFJDSFDSKF"